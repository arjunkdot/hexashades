{"version":3,"file":"index.cjs.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * Create an array of shades & tints for a given color\n * @license MIT\n */\n\n\ntype RgbType = {\n    red: number,\n    green: number,\n    blue: number,\n};\n\nexport class Colors {\n    result: string[];\n    limit: number;\n\n \n    constructor() {\n        this.result = [];\n        this.limit = 0;\n    }\n    \n    \n     #hex2Rgb(hex:string) {\n        const sections = this.#hexToGroups(hex);\n        const rgb = { red: 0, green: 0, blue: 0 };\n\n        if(sections === null) return rgb;\n\n        rgb[\"red\"] = parseInt(sections[0], 16);\n        rgb[\"green\"] = parseInt(sections[1], 16);\n        rgb[\"blue\"] = parseInt(sections[2], 16);\n\n        // Check for invalid output\n        if (Object.values(rgb).includes(NaN)) {\n            return rgb;\n        }\n\n        return rgb;\n    \n    }\n\n\n     #rgb2hex(rgb : RgbType) {\n        return ((1 << 24) + (rgb.red << 16) + (rgb.green << 8) + rgb.blue)\n            .toString(16)\n            .slice(1);\n    }\n\n     #hexToGroups(input:string) {\n        return input.match(/.{1,2}/g);\n    }\n\n     #getShade(color:number, percentage:number) {\n        return Math.round(color * (percentage / 100));\n    }\n\n     #generateShades(rgb: RgbType, percentage:number) {\n        const rgbShade = {\n            red: this.#getShade(rgb.red, this.limit),\n            green: this.#getShade(rgb.green, this.limit),\n            blue: this.#getShade(rgb.blue, this.limit),\n        };\n        this.result.push(this.#rgb2hex(rgbShade));\n        this.limit += percentage;\n\n        if (this.limit === 100) {\n            return;\n        }\n        this.#generateShades(rgb, percentage);\n    }\n\n     #getTint(color:number, percentage:number) {\n        return Math.round(color + (255 - color) * (percentage / 100));\n    }\n\n      #generateTints(rgb:RgbType, percentage:number) {\n        this.limit += percentage;\n        const rgbTint = {\n            red: this.#getTint(rgb.red, this.limit),\n            green: this.#getTint(rgb.green, this.limit),\n            blue: this.#getTint(rgb.blue, this.limit),\n        };\n        this.result.push(this.#rgb2hex(rgbTint));\n        if (this.limit === 100) {\n            return;\n        }\n        this.#generateTints(rgb, percentage);\n    }\n\n    createColors(color:string, percentage:number) {\n        const rgb = this.#hex2Rgb(color);\n        // Generate Tints\n        this.#generateTints(rgb, percentage);\n        // Reset Limit\n        this.limit = 0;\n        // Generate Shades\n        this.#generateShades(rgb, percentage);\n\n        // Arrange colors in ascending order\n        const tints = this.result.slice(0, this.result.length / 2).reverse();\n        const shades = this.result.slice(this.result.length / 2, this.result.length).reverse();\n        shades.unshift(color);\n\n        return tints.concat(shades);\n    }\n}\n"],"names":[],"mappings":"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"}